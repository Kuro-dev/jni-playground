cmake_minimum_required(VERSION 3.21)
project(jni_example LANGUAGES C)

# Detect platform and architecture
if(WIN32)
    set(PLATFORM "win32")
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(ARCH "x86-64")
    else()
        set(ARCH "x86")
    endif()
elseif(APPLE)
    set(PLATFORM "darwin")
    set(ARCH "x86-64") # or "aarch64" for M1
else()
    set(PLATFORM "linux")
    set(ARCH "x86-64")
endif()

# JNI Configuration
find_package(JNI REQUIRED)
include_directories(${JNI_INCLUDE_DIRS})

# Find all org_kurodev source files
file(GLOB NATIVE_SOURCES "org_kurodev_*.c")

# Output directory
set(JAVA_RESOURCES_DIR "../../src/main/resources/${PLATFORM}-${ARCH}")

# Create the resources directory if it doesn't exist
file(MAKE_DIRECTORY "${JAVA_RESOURCES_DIR}")

# Platform-specific library suffix
if(WIN32)
    set(LIB_SUFFIX ".dll")
elseif(APPLE)
    set(LIB_SUFFIX ".dylib")
else()
    set(LIB_SUFFIX ".so")
endif()

# For each source file, create a separate library
foreach(SRC_FILE ${NATIVE_SOURCES})
    # Get the base name without extension
    get_filename_component(LIB_NAME ${SRC_FILE} NAME_WE)
    
    # Create the library
    add_library(${LIB_NAME} SHARED ${SRC_FILE})
    
    # Set output properties
    set_target_properties(${LIB_NAME} PROPERTIES
        OUTPUT_NAME "${LIB_NAME}"
        PREFIX ""
        SUFFIX "${LIB_SUFFIX}"
        LIBRARY_OUTPUT_DIRECTORY "${JAVA_RESOURCES_DIR}"
        RUNTIME_OUTPUT_DIRECTORY "${JAVA_RESOURCES_DIR}"  # For Windows DLLs
    )
    
    # Install rule (optional)
    install(TARGETS ${LIB_NAME}
        DESTINATION "${JAVA_RESOURCES_DIR}"
    )
endforeach()